# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoCeleryBeatClockedschedule(models.Model):
    clocked_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_celery_beat_clockedschedule'


class DjangoCeleryBeatCrontabschedule(models.Model):
    minute = models.CharField(max_length=240)
    hour = models.CharField(max_length=96)
    day_of_week = models.CharField(max_length=64)
    day_of_month = models.CharField(max_length=124)
    month_of_year = models.CharField(max_length=64)
    timezone = models.CharField(max_length=63)

    class Meta:
        managed = False
        db_table = 'django_celery_beat_crontabschedule'


class DjangoCeleryBeatIntervalschedule(models.Model):
    every = models.IntegerField()
    period = models.CharField(max_length=24)

    class Meta:
        managed = False
        db_table = 'django_celery_beat_intervalschedule'


class DjangoCeleryBeatPeriodictask(models.Model):
    name = models.CharField(unique=True, max_length=200)
    task = models.CharField(max_length=200)
    args = models.TextField()
    kwargs = models.TextField()
    queue = models.CharField(max_length=200, blank=True, null=True)
    exchange = models.CharField(max_length=200, blank=True, null=True)
    routing_key = models.CharField(max_length=200, blank=True, null=True)
    expires = models.DateTimeField(blank=True, null=True)
    enabled = models.IntegerField()
    last_run_at = models.DateTimeField(blank=True, null=True)
    total_run_count = models.PositiveIntegerField()
    date_changed = models.DateTimeField()
    description = models.TextField()
    crontab = models.ForeignKey(DjangoCeleryBeatCrontabschedule, models.DO_NOTHING, blank=True, null=True)
    interval = models.ForeignKey(DjangoCeleryBeatIntervalschedule, models.DO_NOTHING, blank=True, null=True)
    solar = models.ForeignKey('DjangoCeleryBeatSolarschedule', models.DO_NOTHING, blank=True, null=True)
    one_off = models.IntegerField()
    start_time = models.DateTimeField(blank=True, null=True)
    priority = models.PositiveIntegerField(blank=True, null=True)
    headers = models.TextField()
    clocked = models.ForeignKey(DjangoCeleryBeatClockedschedule, models.DO_NOTHING, blank=True, null=True)
    expire_seconds = models.PositiveIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'django_celery_beat_periodictask'


class DjangoCeleryBeatPeriodictasks(models.Model):
    ident = models.SmallIntegerField(primary_key=True)
    last_update = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_celery_beat_periodictasks'


class DjangoCeleryBeatSolarschedule(models.Model):
    event = models.CharField(max_length=24)
    latitude = models.DecimalField(max_digits=9, decimal_places=6)
    longitude = models.DecimalField(max_digits=9, decimal_places=6)

    class Meta:
        managed = False
        db_table = 'django_celery_beat_solarschedule'
        unique_together = (('event', 'latitude', 'longitude'),)


class DjangoCeleryResultsChordcounter(models.Model):
    group_id = models.CharField(unique=True, max_length=255)
    sub_tasks = models.TextField()
    count = models.PositiveIntegerField()

    class Meta:
        managed = False
        db_table = 'django_celery_results_chordcounter'


class DjangoCeleryResultsGroupresult(models.Model):
    group_id = models.CharField(unique=True, max_length=255)
    date_created = models.DateTimeField()
    date_done = models.DateTimeField()
    content_type = models.CharField(max_length=128)
    content_encoding = models.CharField(max_length=64)
    result = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'django_celery_results_groupresult'


class DjangoCeleryResultsTaskresult(models.Model):
    task_id = models.CharField(unique=True, max_length=255)
    status = models.CharField(max_length=50)
    content_type = models.CharField(max_length=128)
    content_encoding = models.CharField(max_length=64)
    result = models.TextField(blank=True, null=True)
    date_done = models.DateTimeField()
    traceback = models.TextField(blank=True, null=True)
    meta = models.TextField(blank=True, null=True)
    task_args = models.TextField(blank=True, null=True)
    task_kwargs = models.TextField(blank=True, null=True)
    task_name = models.CharField(max_length=255, blank=True, null=True)
    worker = models.CharField(max_length=100, blank=True, null=True)
    date_created = models.DateTimeField()
    periodic_task_name = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'django_celery_results_taskresult'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoFtpserverFtpuseraccount(models.Model):
    last_login = models.DateTimeField(blank=True, null=True)
    home_dir = models.CharField(max_length=1024, blank=True, null=True)
    group = models.ForeignKey('DjangoFtpserverFtpusergroup', models.DO_NOTHING)
    user = models.OneToOneField(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_ftpserver_ftpuseraccount'


class DjangoFtpserverFtpusergroup(models.Model):
    name = models.CharField(unique=True, max_length=30)
    permission = models.CharField(max_length=8)
    home_dir = models.CharField(max_length=1024, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'django_ftpserver_ftpusergroup'


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class TickerManagementPost(models.Model):
    id = models.BigAutoField(primary_key=True)
    title = models.CharField(max_length=250)
    slug = models.CharField(max_length=250)
    body = models.TextField()
    publish = models.DateTimeField()
    created = models.DateTimeField()
    updated = models.DateTimeField()
    status = models.CharField(max_length=10)
    author = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'ticker_management_post'


class TickerManagementRundecklog(models.Model):
    rundeck_id = models.IntegerField(primary_key=True)
    ticker_id = models.IntegerField(blank=True, null=True)
    ticker_title = models.CharField(max_length=150, blank=True, null=True)
    execution = models.CharField(max_length=150, blank=True, null=True)
    successfull_nodes = models.TextField(blank=True, null=True)
    failed_nodes = models.TextField(blank=True, null=True)
    tv_status = models.CharField(max_length=150, blank=True, null=True)
    ipad_status = models.CharField(db_column='iPad_status', max_length=150, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'ticker_management_rundecklog'


class TickerManagementSetup(models.Model):
    id = models.BigAutoField(primary_key=True)
    fqdn = models.CharField(db_column='FQDN', max_length=60)  # Field name made lowercase.
    dvs_token = models.CharField(db_column='Dvs_Token', max_length=150, blank=True, null=True)  # Field name made lowercase.
    rundeck_token = models.CharField(db_column='Rundeck_Token', max_length=150, blank=True, null=True)  # Field name made lowercase.
    apache_server_url = models.CharField(db_column='Apache_server_url', max_length=150, blank=True, null=True)  # Field name made lowercase.
    ticker_fqdn = models.CharField(db_column='Ticker_FQDN', max_length=150, blank=True, null=True)  # Field name made lowercase.
    rundeck_api_version = models.IntegerField(db_column='Rundeck_Api_Version')  # Field name made lowercase.
    rundeck_start_job = models.CharField(db_column='Rundeck_Start_Job', max_length=150, blank=True, null=True)  # Field name made lowercase.
    rundeck_stop_job = models.CharField(db_column='Rundeck_Stop_Job', max_length=150, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'ticker_management_setup'


class TickerManagementTask(models.Model):
    id = models.BigAutoField(primary_key=True)
    ip = models.CharField(max_length=200)
    tv_status = models.IntegerField()
    ipad_status = models.IntegerField()
    ticker_id = models.CharField(max_length=50, blank=True, null=True)
    completed = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ticker_management_task'


class TickerManagementTickerdetails(models.Model):
    ticker_id = models.AutoField(primary_key=True)
    ticker_type = models.CharField(max_length=60)
    ticker_json = models.TextField()
    wings = models.CharField(max_length=300, blank=True, null=True)
    created_by = models.CharField(max_length=50, blank=True, null=True)
    created_on = models.DateTimeField()
    modified_by = models.CharField(max_length=50, blank=True, null=True)
    modified_on = models.DateTimeField()
    is_active = models.PositiveIntegerField()
    is_deleted = models.PositiveIntegerField()
    deleted_on = models.DateTimeField(blank=True, null=True)
    ticker_end_time = models.DateTimeField(blank=True, null=True)
    ticker_start_time = models.DateTimeField(blank=True, null=True)
    ticker_title = models.CharField(max_length=50)
    floors = models.CharField(max_length=300, blank=True, null=True)
    rooms = models.CharField(max_length=300, blank=True, null=True)
    ticker_priority = models.CharField(max_length=10)
    frequency = models.CharField(max_length=30, blank=True, null=True)
    occuring_days = models.CharField(max_length=500, blank=True, null=True)
    roomtypeselection = models.CharField(db_column='roomTypeSelection', max_length=300, blank=True, null=True)  # Field name made lowercase.
    rundeck_id = models.IntegerField(blank=True, null=True)
    rundeckid = models.PositiveIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ticker_management_tickerdetails'


class TickerManagementTickerhistory(models.Model):
    history_id = models.AutoField(primary_key=True)
    ticker_id = models.PositiveIntegerField(blank=True, null=True)
    ticker_type = models.CharField(max_length=60)
    ticker_json = models.TextField()
    created_by = models.CharField(max_length=50, blank=True, null=True)
    created_on = models.DateTimeField()
    modified_by = models.CharField(max_length=50, blank=True, null=True)
    modified_on = models.DateTimeField()
    is_active = models.PositiveIntegerField()
    is_deleted = models.PositiveIntegerField()
    deleted_on = models.DateTimeField(blank=True, null=True)
    ticker_end_time = models.DateTimeField(blank=True, null=True)
    ticker_start_time = models.DateTimeField(blank=True, null=True)
    ticker_title = models.CharField(max_length=50)
    floors = models.CharField(max_length=300, blank=True, null=True)
    rooms = models.CharField(max_length=300, blank=True, null=True)
    ticker_priority = models.CharField(max_length=10)
    wings = models.CharField(max_length=300, blank=True, null=True)
    frequency = models.CharField(max_length=30, blank=True, null=True)
    occuring_days = models.CharField(max_length=500, blank=True, null=True)
    rundeckid = models.PositiveIntegerField(blank=True, null=True)
    roomtypeselection = models.CharField(db_column='roomTypeSelection', max_length=300, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'ticker_management_tickerhistory'
